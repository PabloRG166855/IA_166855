 % When the list is empty, it prints 2 line skips.
 output([]) :- nl, nl.  
 % It outputs the number of cannibals and misionaries before and after the boat moves,
 % as well as from what side the boat is leaving and a small description of the action.
 output([[A,B,String]|T]) :-  
 % This is the format on which is the text is displayed.
 output(T),  
      write(B), write(' ~~ '), write(A), write(': '), write(String), nl.  
   
   
 % When the target state is met, the movelist is printed.
 path([A,B,C],[A,B,C],_,MoveList):-  
 nl,nl,output(MoveList).  
   
   
 % Recursive call to solve the problem. 
 path([A,B,C],[D,E,F],Traversed,Moves) :-  
 % It inputs the moves that the computer will take.  
   move([A,B,C],[I,J,K],Out),  
 % This calls the legal function to check if the move doesn't result in a missionary being eaten.
   legal([I,J,K]),  
 % This checks and stores the moves done by the computer as to not repeat them and get stuck in
 % a cycle.
   not(member([I,J,K],Traversed)),  
   path([I,J,K],[D,E,F],[[I,J,K]|Traversed],[ [[I,J,K],[A,B,C],Out] | Moves ]).  
   
   
 % List of all available moves from left to right. 
 move([A,B,left],[C,B,right],'One missionary crosses the river') :-  
   A > 0, C is A - 1.  
 move([A,B,left],[C,B,right],'Two missionaries cross the river') :-  
   A > 1, C is A - 2.  
 move([A,B,left],[C,D,right],'One missionary and One cannibal cross the river') :-  
   A > 0, B > 0, C is A - 1, D is B - 1.  
 move([A,B,left],[A,D,right],'One cannibal crosses the river') :-  
   B > 0, D is B - 1.  
 move([A,B,left],[A,D,right],'Two cannibals cross the river') :-  
   B > 1, D is B - 2.  
 % List of all available moves from right to left.
 move([A,B,right],[C,B,left],'One missionary returns from the other side') :-  
   A < 3, C is A + 1.  
 move([A,B,right],[C,B,left],'Two missionaries return from the other side') :-  
   A < 2, C is A + 2.  
 move([A,B,right],[C,D,left],'One missionary and One cannibal return from the other side') :-  
   A < 3, B < 3, C is A + 1, D is B + 1.  
 move([A,B,right],[A,D,left],'One cannibal returns from the other side') :-  
   B < 3, D is B + 1.  
 move([A,B,right],[A,D,left],'Two cannibals return from the other side') :-  
   B < 2, D is B + 2.  
   
 % The legal function used previously to check that the move doesn't end on the missionaries being
 % eaten.
 legal([B,A,_]) :-  
   (A =< B ; B = 0),  
   C is 3-A, D is 3-B,  
   (C =< D; D = 0).  
